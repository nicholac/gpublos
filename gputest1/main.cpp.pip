//
//  main.cpp
//  gputest1
//
//  Created by Chris Nicholas on 26/05/2015.
//  Copyright (c) 2015 Chris Nicholas. All rights reserved.
//

//#define PROGRAM_FILE "simplekern.cl"
#define __CL_ENABLE_EXCEPTIONS

#include <iostream>
#include <fstream>
#include <iterator>
#ifdef __APPLE__
#include <OpenCL/opencl.h>
#include <OpenCL/cl.hpp>
#else
#include <CL/cl.h>
#include <CL/cl.hpp>
#endif
//#include <OpenCL/opencl.h>

#include <time.h>
#include <cmath>
//#include <position.h>
#include "gdal_priv.h"
#include "utils.h"
//#include <worldParams.h>
//#include <motionUtils.h>
#include <iomanip>
//#include <recShot.h>


int main(int argc, const char * argv[]) {
    
    //Files, vars etc
    //char* demFName = "/Users/dusted-dstl/Documents/geodata/mount_chip.tif";
    char* demFName = "/Users/dusted-dstl/Documents/geodata/mount.dem";
    char* kernelsSrc = "/Users/dusted-dstl/Documents/xcodeworkspace/gpublos/gputest1/bloskern.cl";
    //Linux
    //char* demFName = "/home/ec2-user/gputest1/mount.dem";
    //char* kernelsSrc = "/home/ec2-user/gputest1/simplekern.cl";
    float tgtX = 559783.0;
    float tgtY = 5119823.0;
    int skipVal = 1000;
    //These ar arbitrary - i.e. not calculated based on the modelling
    float minDist = 450.0;
    float maxDist = 4500.0;
    float gravity = 9.82;
    //TODO: Alter this based on the altitude
    float airDens = 1.225;
    //TODO: Allow setting of this based on weapon vars
    //Using Sreamlined body coefficient
    float dragCoef = 0.04; //Coef for sphere
    float pi = 3.1415926; // pi
    float calibre = 0.081;
    float fArea = pi*(pow((0.5*calibre), 2.0));
    float mortSigma = dragCoef*fArea*0.5*airDens;
    float muzzVel = 225.0;
    float mortMass = 4.2;
    float gForce = mortMass * gravity;
    //float launchZ = 0.0;
    float tgtZ = 0.0;
    char* outfName = "/Users/dusted-dstl/Documents/geodata/gpu_out7.tif";
    float minElev = 45.0;
    float maxElev = 85.0;
    //Change and threshold are the same...
    //Blosmp is: 0.00005
    //elevThreshold seems to make no real difference - if it cant find the solution at 0.001 then it wont find it at 0.00005!
    float elevThreshold = 0.01;
    float distThreshold = 20.0;
    //Output errors - timestep has reduced the errors in middle of raster
    float timeStep = 0.05;
    
    
    
    // For catching cl errors
    cl_int err;
    //get all platforms (drivers)
    std::vector<cl::Platform> platforms;
    std::vector<cl::Device> devices;
    std::vector<cl::Kernel> kernels;
    cl::Platform::get(&platforms);
    if(platforms.size()==0){
        std::cout<<" No platforms found. Check OpenCL installation!\n";
        exit(1);
    }
    std::cout << " All Platforms follow " << std::endl;
    for (int i=0; i<platforms.size(); i++) {
        std::cout << platforms[i].getInfo<CL_PLATFORM_NAME>() << std::endl;
    }
    cl::Platform default_platform=platforms[0];
    std::cout << "Querying platform: "<<default_platform.getInfo<CL_PLATFORM_NAME>()<<"\n";
    
    //get default device of the default platform
    default_platform.getDevices(CL_DEVICE_TYPE_ALL, &devices);
    if(devices.size()==0){
        std::cout<<" No devices found. Check OpenCL installation!\n";
        exit(1);
    }
    std::cout << " All Devices follow " << std::endl;
    for (int i=0; i<devices.size(); i++) {
        std::cout << "Device Name: " << devices[i].getInfo<CL_DEVICE_NAME>() << std::endl;
        std::cout << "Device Global Mem max size (mb): " << devices[i].getInfo<CL_DEVICE_GLOBAL_MEM_SIZE>()/1000000 << std::endl;
        std::cout << "Device Local Mem max size: " << devices[i].getInfo<CL_DEVICE_LOCAL_MEM_SIZE>() << std::endl;
    }
    
    
    // create platform
    cl::Platform::get(&platforms);
    //CPU Implementation
    //platforms[0].getDevices(CL_DEVICE_TYPE_CPU, &devices);
    //GPU Implementation
    platforms[0].getDevices(CL_DEVICE_TYPE_GPU, &devices);
    //Query device info for memory size
    std::cout << devices[0].getInfo<CL_DEVICE_LOCAL_MEM_SIZE>() << std::endl;
    
    //Change this if want to use GPU
    cl::Context context = cl::Context(devices);
    
    //Create Command queue
    //CHECK THIS FOR GPU
    cl::CommandQueue queue(context, devices[0]);
    
    // load opencl source
    std::ifstream cl_file(kernelsSrc);
    std::string cl_string(std::istreambuf_iterator<char>(cl_file), (std::istreambuf_iterator<char>()));
    cl::Program::Sources source(1, std::make_pair(cl_string.c_str(), cl_string.length()+1));
    
    // create program
    cl::Program program(context, source);
    
    try {
        
        // compile opencl source
        std::cout << "Compiling Kernels..." << std::endl;
        program.build(devices);
        std::cout << "Done Compiling" << std::endl;
        
    }
    catch (cl::Error &err) {
        //Get the build log for the first device
        std::cerr << "Building failed, " << err.what() << "(" << err.err() << ")"
        << "\nRetrieving build log\n"
        << program.getBuildInfo<CL_PROGRAM_BUILD_LOG>(devices[0])
        << "\n";
        return -1;
        
    }
    
    std::cout << "Building indata" << std::endl;
    
    //Open the DEM and load data into memory
    //GDAL Vars
    double        adfGeoTransform[6];
    //float rasterXSize = 0.0;
    //float rasterYSize = 0.0;
    GDALDataset  *poDataset;
    poDataset = Utils::openDem(demFName);
    
    //Get geotransform info ready
    poDataset->GetGeoTransform( adfGeoTransform );
    float gt0 = float(adfGeoTransform[0]);
    float gt1 = float(adfGeoTransform[1]);
    float gt2 = float(adfGeoTransform[2]);
    float gt3 = float(adfGeoTransform[3]);
    float gt4 = float(adfGeoTransform[4]);
    float gt5 = float(adfGeoTransform[5]);
    cl_float8 cl_geoTrans = {float(adfGeoTransform[0]), float(adfGeoTransform[1]), float(adfGeoTransform[2]), float(adfGeoTransform[3]),
        float(adfGeoTransform[4]), float(adfGeoTransform[5])};
    std::cout << gt0 << " // " << adfGeoTransform[0] << std::endl;
    int rasterXSize = poDataset->GetRasterXSize();
    int rasterYSize = poDataset->GetRasterYSize();
    cl_float2 cl_rasterSize = {float(rasterXSize), float(rasterYSize)};
    int taskSize = rasterXSize*rasterYSize;
    std::cout << "rasterSizeX: " << rasterXSize << std::endl;
    std::cout << "rasterSizeY: " << rasterYSize << std::endl;
    
    GDALRasterBand  *poBand;
    poBand = poDataset->GetRasterBand( 1 );
    int   nXSize = poBand->GetXSize();
    int   nYSize = poBand->GetYSize();
    
    //std::vector<float> demSP = Utils::GDAL2VEC (poDataset);
    //Load DEM into cl_float8:
    //float8(x,y,z,theta,dist,runflag,blos,tlos)
    cl_float8 *h_demSP = new cl_float8[taskSize];
    Utils::GDAL2FLOAT8(poDataset, h_demSP);
    
    std::cout << "Size of DEM in memory Ref (kb): " << (taskSize*sizeof(float))/1000 << std::endl;
    std::cout << "Size of DEM: " << taskSize << " tasksize: " << taskSize << std::endl;
    std::cout << "Size of DEM as Float8 (mb): " << taskSize*sizeof(cl_float8)/1000000 << std::endl;
    std::cout << "Will the whole DEM fit into Global mem @ float8?: " << std::endl;
    bool chkGlobalMem = 0;
    for (int i=0; i<devices.size(); i++) {
        chkGlobalMem = taskSize*sizeof(cl_float8) < devices[i].getInfo<CL_DEVICE_GLOBAL_MEM_SIZE>();
        std::cout << "Device Name: " << devices[i].getInfo<CL_DEVICE_NAME>() << std::endl;
        std::cout << "Sizes (dem, global mem) & Chk: " << taskSize*sizeof(cl_float8) << " // " << devices[i].getInfo<CL_DEVICE_GLOBAL_MEM_SIZE>() << " // " << chkGlobalMem << std::endl;
    }
    if (chkGlobalMem == 0){
        std::cout << "Not enough Global memory for the DEM on this device - aborting " << std::endl;
        return 1;
    }
    
//    //Build the array of possible launch angles
//    std::vector<float> thetaArr;
//    for (float i=minElev; i<maxElev; i+=thetaStep){
//        thetaArr.push_back(i);
//    }
//    float *h_thetaArr = new float[thetaArr.size()];
//    for (int i=0; i<thetaArr.size(); i++){
//        h_thetaArr[i] = thetaArr.at(i);
//    }
    
//    //Build the array of output distances for each theta
//    float *h_distArr = new float[thetaArr.size()];
//    std::cout << "Parrellel Shots per DEM Px: " << thetaArr.size()<< std::endl;
//    std::cout << "Total shots: " << thetaArr.size()*taskSize<< std::endl;
    
    //clock_t tt = clock();
    //clock_t tt_real = clock();
    
    try {
        std::cout << "Loading Buffers " << std::endl;
        //THESE TWO FOR CPU - then COMMENT CPU
        //Create a buffer object to this memory
        cl::Buffer d_inBuffDEMFull = cl::Buffer(context, CL_MEM_READ_WRITE, taskSize*sizeof(cl_float8), NULL, &err);
//        cl::Buffer d_outBuff = cl::Buffer(context, CL_MEM_READ_WRITE, taskSize*sizeof(float), NULL, &err);
//        cl::Buffer d_thetaArr = cl::Buffer(context, CL_MEM_READ_ONLY, thetaArr.size()*sizeof(float), NULL, &err);
//        cl::Buffer d_distArr = cl::Buffer(context, CL_MEM_READ_WRITE, thetaArr.size()*sizeof(float), NULL, &err);
        //cl::Buffer d_optimArr = cl::Buffer(context, CL_MEM_READ_WRITE, taskSize*sizeof(cl_float8), NULL, &err);
        
        //Out data on the host
//        float *h_output = new float[taskSize];
        
        std::cout << "Writing Buffers " << std::endl;
        //Write Buffers to device
        //Theta Arr
//        queue.enqueueWriteBuffer(d_thetaArr,CL_TRUE,0,thetaArr.size()*sizeof(float), h_thetaArr);
        //DEM Arr
        queue.enqueueWriteBuffer(d_inBuffDEMFull,CL_TRUE,0,taskSize*sizeof(cl_float8), h_demSP);
        queue.finish();
        
        
        //WORKS
        //Build Kernels
        //cl::KernelFunctor rangeChk(cl::Kernel(program,"rangeChk"),queue,cl::NullRange,cl::NDRange(taskSize),cl::NullRange);
        //cl::KernelFunctor shotOpt(cl::Kernel(program,"shotOpt"),queue,cl::NullRange,cl::NDRange(thetaArr.size()),cl::NullRange);
        //cl::KernelFunctor thetaDistReduce(cl::Kernel(program,"thetaDistReduce"),queue,cl::NullRange,cl::NDRange(thetaArr.size()),cl::NullRange);
        
        std::cout << "Building kernels " << std::endl;
        cl::Kernel rangeChk = cl::Kernel(program, "rangeChk", &err);
//        cl::Kernel shotOpt = cl::Kernel(program, "shotOpt", &err);
//        cl::Kernel shotOptThetaFast = cl::Kernel(program, "shotOptThetaFast", &err);
//        cl::Kernel shotOptDem = cl::Kernel(program, "shotOptDem", &err);
//        cl::Kernel shotOptDemFast = cl::Kernel(program, "shotOptDemFast", &err);
//        cl::Kernel thetaDistReduce = cl::Kernel(program, "thetaDistReduce", &err);
        cl::Kernel demIntersectFast = cl::Kernel(program, "demIntersectFast", &err);
//        cl::Kernel optimise = cl::Kernel(program, "optimise", &err);
        cl::Kernel optEasy = cl::Kernel(program, "optEasy", &err);
//        cl::Kernel optEasy2d = cl::Kernel(program, "optEasy2d", &err);
        cl::Kernel optEasy3dSingAz = cl::Kernel(program, "optEasy3dSingAz", &err);
        queue.finish();
        
        
        //Dummy target position
        cl_float4 tgtPos = {tgtX, tgtY, 3889.0f, 0.0};
        
        //WORKS - Kernel Func
        //CL - Firstly thin the data on device by range
        //rangeChk(d_inBuffDEMFull, tgtPos, minDist, maxDist);
        
        std::cout << "Enqueue Args - rangeChk " << std::endl;
        err = rangeChk.setArg(0, d_inBuffDEMFull);
        err = rangeChk.setArg(1, tgtPos);
        err = rangeChk.setArg(2, minDist);
        err = rangeChk.setArg(3, maxDist);
        queue.finish();
        
        //Simulate looping across the DEM
        clock_t tt = clock();
        
        std::cout << "Execute rangeChk " << std::endl;
        err = queue.enqueueNDRangeKernel(rangeChk, cl::NullRange, cl::NDRange(taskSize), cl::NullRange, NULL, NULL);
        queue.finish();
        
        //Read the processed DEM data back out
        err = queue.enqueueReadBuffer(d_inBuffDEMFull, CL_TRUE, 0, taskSize*sizeof(cl_float8), h_demSP, NULL, NULL);
        // wait for completion
        queue.finish();

        //Thin data down based on in range pixels - just counts
        int inRngCnt = 0;
        for (int i=0; i<taskSize; i++){
            if (h_demSP[i].s5 == 1.0f){
                inRngCnt++;
            }
        }
        std::cout << "Num Valid Shots after range thin: " << inRngCnt << std::endl;
        //Swap values
        cl_float8 *h_demSP_thin = new cl_float8[inRngCnt];
        int thinI = 0;
        for (int i=0; i<taskSize; i++){
            if (h_demSP[i].s5 == 1.0f){
                h_demSP_thin[thinI]=h_demSP[i];
                //Store the index in full DEM for later readout
                h_demSP_thin[thinI].s7 = static_cast<float>(i);
                thinI++;
            }
            
        }
        //delete[] h_demSP;
        
        
        
        //Swap tasksize around to avoid mistakes - its now the thinned size
        taskSize = inRngCnt;
        
        std::cout << "Copying thinned data back in" << inRngCnt << std::endl;
        cl::Buffer d_inBuffDEMThin = cl::Buffer(context, CL_MEM_READ_WRITE, taskSize*sizeof(cl_float8), NULL, &err);
        queue.enqueueWriteBuffer(d_inBuffDEMThin,CL_TRUE,0,taskSize*sizeof(cl_float8), h_demSP_thin);
        queue.finish();
        
        //Build 1D DEM Z array
        //Load DEMZ's into single Arr
        float *h_demZArr = new float[taskSize];
        for (int i=0; i<taskSize; i++){
            //Only want the z's
            h_demZArr[i] = h_demSP[i].s2;
        }
        //Make buffer and write in
        cl::Buffer d_demZArr = cl::Buffer(context, CL_MEM_READ_ONLY, taskSize*sizeof(float), NULL, &err);
        queue.enqueueWriteBuffer(d_demZArr,CL_TRUE,0,taskSize*sizeof(float), h_demZArr);
        queue.finish();
        
        //Optimisation and reduction
        //double tgtPxX = 0.0;
        //double tgtPxY = 0.0;
        //Utils::coordtoPx2d(tgtPos.x, tgtPos.y, tgtPxX, tgtPxY, adfGeoTransform, rasterXSize, rasterYSize);
        //int p = (int)(tgtPxY*rasterXSize+tgtPxX);
        //tgtPos.z = h_demSP[p].z;
        //cl_float4 laPos = {0.0, 0.0, 0.0, 0.0};
        //float minTheta = 0.0;
        
        //Works - DEM Fast
        //std::cout << "Shot Args" << std::endl;
        //err = shotOptDemFast.setArg(0, d_inBuffDEMFull);
        //err = shotOptDemFast.setArg(1, tgtPos);
        //err = shotOptDemFast.setArg(2, timeStep);
        //queue.finish();
        
//        //Works - DEM Fast
        std::cout << "Intersect Args" << std::endl;
        err = demIntersectFast.setArg(0, d_inBuffDEMThin);
        err = demIntersectFast.setArg(1, tgtPos);
        err = demIntersectFast.setArg(2, timeStep);
        err = demIntersectFast.setArg(3, d_demZArr);
        err = demIntersectFast.setArg(4, cl_geoTrans);
        err = demIntersectFast.setArg(5, cl_rasterSize);
        queue.finish();
        
        
//        //WORKS - Theta Fast
//        std::cout << "Enqueue Args - shotOptThetaFast " << std::endl;
//        //Build the static input args - ShotOpt
//        err = shotOptThetaFast.setArg(0, d_thetaArr);
//        err = shotOptThetaFast.setArg(1, d_distArr);
//        err = shotOptThetaFast.setArg(2, tgtPos);
//        err = shotOptThetaFast.setArg(4, timeStep);
//        queue.finish();
//        
//        //WORKS - ShotOptDemFast
//        std::cout << "Enqueue Args - shotOptDemFast " << std::endl;
//        //Build the static input args - ShotOpt
//        err = shotOptDemFast.setArg(0, d_inBuffDEMFull);
//        err = shotOptDemFast.setArg(1, tgtPos);
//        err = shotOptDemFast.setArg(2, timeStep);
//        err = shotOptDemFast.setArg(3, d_optimArr);
//        queue.finish();
//        
//        std::cout << "Enqueue Args - thetaReduce" << std::endl;
//        //Build the static input args - Dist Reduce
//        err = thetaDistReduce.setArg(0, d_thetaArr);
//        err = thetaDistReduce.setArg(1, d_distArr);
//        err = thetaDistReduce.setArg(2, d_inBuffDEMFull);
//        queue.finish();
//        
//        std::cout << "Enqueue Args - optimise" << std::endl;
//        //Build the static input args - Dist Reduce
//        err = optimise.setArg(0, d_inBuffDEMFull);
//        err = optimise.setArg(1, d_optimArr);
//        err = optimise.setArg(2, tgtPos);
//        queue.finish();
        
        std::cout << "Optimisation - build data and queue args" << std::endl;
        //Build Optimisation Data Arr (theta, mindist, elevmin, elevmax, elevmid, spacing, optimflag (0.0 - running, 1.0 - success, 2.0 - failed), SPARE)
        cl_float8 *h_optimArr = new cl_float8[taskSize];
        for (int i=0; i<taskSize; i++){
            cl_float8 out = {0.0f, 99999.0f, minElev, maxElev, minElev+((maxElev-minElev)/2.0f), (maxElev-minElev)/2.0f, 0.0f, 0.0f};
            h_optimArr[i] = out;
        }
        cl::Buffer d_optimArr = cl::Buffer(context, CL_MEM_READ_WRITE, taskSize*sizeof(cl_float8), NULL, &err);
        queue.enqueueWriteBuffer(d_optimArr,CL_TRUE,0,taskSize*sizeof(cl_float8), h_optimArr);
        //Build the static input args - Dist Reduce
        err = optEasy.setArg(0, d_inBuffDEMThin);
        err = optEasy.setArg(1, d_optimArr);
        err = optEasy.setArg(2, tgtPos);
        err = optEasy.setArg(3, timeStep);
        err = optEasy.setArg(4, distThreshold);
        err = optEasy.setArg(5, elevThreshold);
        err = optEasy.setArg(6, minElev);
        err = optEasy.setArg(7, maxElev);
        queue.finish();
        
        //Opt 3D sing az
        err = optEasy3dSingAz.setArg(0, d_inBuffDEMThin);
        err = optEasy3dSingAz.setArg(1, d_optimArr);
        err = optEasy3dSingAz.setArg(2, tgtPos);
        err = optEasy3dSingAz.setArg(3, timeStep);
        err = optEasy3dSingAz.setArg(4, distThreshold);
        err = optEasy3dSingAz.setArg(5, elevThreshold);
        err = optEasy3dSingAz.setArg(6, minElev);
        err = optEasy3dSingAz.setArg(7, maxElev);
        queue.finish();
        
        
        
        //std::clock_t start;
        double duration;
        
        //start = std::clock();
        
        //Loops counter
        int i=0;
        
        //Optimse number left flag - get set inside optimse funct
        int workLeft = taskSize;
        
        //Optimise reduction
        //for (int i=0; i<loops; i++){
        while (workLeft > 0) {
            i++;
        
            std::cout << "Starting Optimisation run: " << i << std::endl;
            //Easy Shot Optimisation
            err = queue.enqueueNDRangeKernel(optEasy3dSingAz, cl::NullRange, cl::NDRange(taskSize), cl::NullRange, NULL, NULL);
            queue.finish();
            
            std::cout << "Done Shots, copying data out: " << i << std::endl;
            
            err = queue.enqueueReadBuffer(d_optimArr, CL_TRUE, 0, taskSize*sizeof(cl_float8), h_optimArr, NULL, NULL);
            queue.finish();
            
            //for (int i=0; i<taskSize; i++){
            //    std::cout << h_optimArr[i].s0 << " / " << h_optimArr[i].s1 << std::endl;
            //}
            
            //for (int i = 0; i < taskSize; i++)  {
            //   std::cout << std::setprecision(10) << "Dist: " << h_optimArr[i].s1 << " / theta: " << h_optimArr[i].s0 << " / runs: " << h_optimArr[i].s7 << std::endl;
            //}
                
            std::cout << "Making optimisation decisions..." << std::endl;
            //Loops inside
            workLeft = Utils::optimise(h_optimArr, taskSize, distThreshold, elevThreshold, minElev, maxElev);
            
            std::cout << "Write data back in" << std::endl;
            queue.enqueueWriteBuffer(d_optimArr,CL_TRUE,0,taskSize*sizeof(cl_float8), h_optimArr);
            
            float progress = ((static_cast<float>(taskSize)-static_cast<float>(workLeft))/static_cast<float>(taskSize))*100.0f;
            std::cout << "Progress: " << progress << "%" << std::endl;

            
            
        
            //DEM Parallel
            //err = queue.enqueueNDRangeKernel(shotOptDem, cl::NullRange, cl::NDRange(taskSize), cl::NullRange, NULL, NULL);
            //Fire Shot
            //err = queue.enqueueNDRangeKernel(shotOptDemFast, cl::NullRange, cl::NDRange(taskSize), cl::NullRange, NULL, NULL);
            //queue.finish();


            
            //WORKS - Theta Parallel
//            if (h_demSP[i].s5 == 1.0f){
//                runCnt++;
//                //Fire Shots
//                err = shotOptThetaFast.setArg(3, h_demSP[i]);
//                err = queue.enqueueNDRangeKernel(shotOptThetaFast, cl::NullRange, cl::NDRange(thetaArr.size()), cl::NullRange, NULL, NULL);
//                queue.finish();
//                
//                //Find Closest - write to DEM Arr on device
//                err = thetaDistReduce.setArg(3, i);
//                err = queue.enqueueNDRangeKernel(thetaDistReduce, cl::NullRange, cl::NDRange(thetaArr.size()), cl::NullRange, NULL, NULL);
//                queue.finish();
//                
//            } else {
//                skipCnt++;
//            }
//            
//            //Some prints
//            if (i%1000 == 0){
//                std::cout << "Runs / Skips / Total: " << runCnt << " / " << skipCnt << " / " << i << std::endl;
//            }
            
            
            //WORKS but Slow - kernel Functors
            //Fire Shots
            //Temporary tgt pos for testing
            //float8(x,y,z,theta,dist,runflag,blos,tlos)
            //cl_float8 pos = {569786.0, 5130048.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0};
            //shotOpt(d_thetaArr, d_distArr, tgtPos, pos, timeStep);
            //shotOpt(d_thetaArr, d_distArr, tgtPos, h_demSP[i], timeStep);
            //Write the closest into the DEM arr
            //thetaDistReduce(d_thetaArr, d_distArr, d_inBuffDEMFull, i);
        }
        
        
        //Intersect - Now we pivot and parallelize based on the DEM
        //Here we're written the optimised theta values into the DEM buffer during optimisation ont he device
        //err = queue.enqueueNDRangeKernel(demIntersectFast, cl::NullRange, cl::NDRange(taskSize), cl::NullRange, NULL, NULL);
        //queue.finish();
        
        
        tt = clock() - tt;
        std::cout << "Done CL Proc: " << float(tt)/CLOCKS_PER_SEC << std::endl;
        
        
        //Read DEM Arr back out
        err = queue.enqueueReadBuffer(d_inBuffDEMThin, CL_TRUE, 0, taskSize*sizeof(cl_float8), h_demSP_thin, NULL, NULL);
        //TESTING - Read Optim array back out
        err = queue.enqueueReadBuffer(d_optimArr, CL_TRUE, 0, taskSize*sizeof(cl_float8), h_optimArr, NULL, NULL);
        queue.finish();
        
        std::cout << "Complete - checking results" << std::endl;
        
        //Count the results
        int blosIntersectCnt = 0;
        int optimSuccess = 0;
        int optimFail = 0;
        int optimPass = 0;
        float totalRuns = 0.0f;
        for (int i=0; i<taskSize; i++) {
            //Total actual shots its taken to optimise - whole DEM
            totalRuns+=h_optimArr[i].s7;
            if (h_optimArr[i].s6 == 2.0f) {
                optimFail++;
                //Check out the spacings
                //Optimisation Data Arr (theta, mindist, elevmin, elevmax, elevmid, spacing, optimflag (0.0 - running, 1.0 - success, 2.0 - failed), SPARE)
                //std::cout << "theta, dist, az: " << h_optimArr[i].s0 << " / " << h_optimArr[i].s1 << " / " << h_optimArr[i].s7 << std::endl;
            } else if (h_optimArr[i].s6 == 0.0f) {
                optimPass++;
            } else {
                optimSuccess++;
                //std::cout << std::setprecision(10) << "Tgt Dist: " << h_optimArr[i].s1 << " / theta: " << h_optimArr[i].s0 << " / spacing: " << h_optimArr[i].s5 << std::endl;
            }
            //Get some intersect data
            if (h_demSP_thin[i].s6 == 1.0f) {
                blosIntersectCnt++;
            }
        }
        
        std::cout << "Total Pixels: " << taskSize << std::endl;
        std::cout << "Total optim success: " << optimSuccess << std::endl;
        std::cout << "Total optim runs (total shots): " << totalRuns << std::endl;
        std::cout << "Total optim fail: " << optimFail << std::endl;
        std::cout << "Total optim pass: " << optimPass << std::endl;
        std::cout << "Total Blos intersect:" << blosIntersectCnt << std::endl;
        std::cout << "Total BLoS  Clear:" << taskSize-blosIntersectCnt << std::endl;
        
        //This doesnt work when compiling using G++ on Linux
        //tt = clock() - tt;
        //tt_real = clock() - tt_real;
        //std::cout << "Done CL Proc: " << float(tt)/CLOCKS_PER_SEC << std::endl;
        //duration = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;
        //std::cout << "Real Secs: " << duration << std::endl;
        
        //TESTING Output - take the thinned optimse data and write it back into the full dataset...
        for (int i=0; i<taskSize; i++) {
            //Get tthe stored index of its position in large array
            int idx = static_cast<int>(h_demSP_thin[i].s7);
            //Double check x an y match
            if (h_demSP[idx].s0 == h_demSP_thin[i].s0 && h_demSP[idx].s1 == h_demSP_thin[i].s1) {
                //0-running, 1-success, 2-failed
                h_demSP[idx].s6 = h_optimArr[i].s6;
                h_demSP[idx].s3 = h_demSP_thin[i].s3;
                h_demSP[idx].s4 = h_demSP_thin[i].s4;
            } else {
                std::cout << "Warning full dem and thin dem x,y dont match at stored idx" << std::endl;
                std::cout << h_demSP[idx].s0 << " / " << h_demSP_thin[i].s0 << " / " << h_demSP[idx].s1 << " / " << h_demSP_thin[i].s1 << std::endl;
            }
        }
        
        //Write to raster
        std::cout << "Dumping Raster" << std::endl;
        int chk = Utils::writeRasterOut (poDataset, outfName, h_demSP);
        //Close base DEM
        GDALClose( (GDALDatasetH) poDataset );
        std::cout << "Write raster result: " << chk << std::endl;
        
        //Cleanup
        delete[] h_demSP;
        delete[] h_optimArr;
        delete[] h_demZArr;
        delete[] h_demSP_thin;
        
    }
    catch (cl::Error &err) {
        //Get the build log for the first device
        std::cerr << "Building failed, " << err.what() << "(" << err.err() << ")"
        << "\nRetrieving build log\n"
        << program.getBuildInfo<CL_PROGRAM_BUILD_LOG>(devices[0])
        << "\n";
        return -1;
    }
    
    std::cout << "Done" << std::endl;
    
    return 0;
}









