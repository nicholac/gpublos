//
//  main.cpp
//  gputest1
//
//  Created by Chris Nicholas on 26/05/2015.
//  Copyright (c) 2015 Chris Nicholas. All rights reserved.
//

//#define PROGRAM_FILE "simplekern.cl"
#define __CL_ENABLE_EXCEPTIONS

#include <iostream>
#include <fstream>
#include <iterator>
#ifdef __APPLE__
    #include <OpenCL/opencl.h>
    #include <OpenCL/cl.hpp>
#else
    #include <CL/cl.h>
    #include <CL/cl.hpp>
#endif
//#include <OpenCL/opencl.h>

#include <time.h>
#include <cmath>
#include <position.h>
#include <Utils.h>
#include <worldParams.h>
#include <motionUtils.h>
#include <recShot.h>


int main(int argc, const char * argv[]) {
    
    //Files etc
    char* demFName = "/Users/dusted-ipro/geodata/mount.dem";
    char* intersectKernel = "/Users/dusted-ipro/Documents/code/code/xcode/gputest1/gputest1/simplekern.cl";
    auto tgtPos = std::make_shared<position>( position{ 562721.0, 5117017.0, 0 } );
    int skipVal = 1000;
    
    
    // For catching cl errors
    cl_int err;
    //get all platforms (drivers)
    std::vector<cl::Platform> platforms;
    std::vector<cl::Device> devices;
    std::vector<cl::Kernel> kernels;
    cl::Platform::get(&platforms);
    if(platforms.size()==0){
        std::cout<<" No platforms found. Check OpenCL installation!\n";
        exit(1);
    }
    std::cout << " All Platforms follow " << std::endl;
    for (auto plat : platforms) {
        std::cout << plat.getInfo<CL_PLATFORM_NAME>() << std::endl;
    }
    cl::Platform default_platform=platforms[0];
    std::cout << "Querying platform: "<<default_platform.getInfo<CL_PLATFORM_NAME>()<<"\n";
    
    //get default device of the default platform
    default_platform.getDevices(CL_DEVICE_TYPE_ALL, &devices);
    if(devices.size()==0){
        std::cout<<" No devices found. Check OpenCL installation!\n";
        exit(1);
    }
    std::cout << " All Devices follow " << std::endl;
    for (auto dev : devices) {
        std::cout << dev.getInfo<CL_DEVICE_NAME>() << std::endl;
    }
    
    
    // create platform
    cl::Platform::get(&platforms);
    platforms[0].getDevices(CL_DEVICE_TYPE_GPU, &devices);
    
    //Change this if want to use GPU
    cl::Context context = cl::Context(devices);
    
    //Create Command queue
    cl::CommandQueue queue(context, devices[0]);
    
    // load opencl source
    std::ifstream cl_file(intersectKernel);
    std::string cl_string(std::istreambuf_iterator<char>(cl_file), (std::istreambuf_iterator<char>()));
    cl::Program::Sources source(1, std::make_pair(cl_string.c_str(), cl_string.length()+1));
    
    // create program
    cl::Program program(context, source);
    
    try {
        
        // compile opencl source
        program.build(devices);
        std::cout << "built kernel" << std::endl;
        
    }
    catch (cl::Error &err) {
        //Get the build log for the first device
        std::cerr << "Building failed, " << err.what() << "(" << err.err() << ")"
        << "\nRetrieving build log\n"
        << program.getBuildInfo<CL_PROGRAM_BUILD_LOG>(devices[0])
        << "\n";
        return -1;
        
    }

    std::cout << "Loading Kern func" << std::endl;
    // load named kernel from opencl source
    cl::Kernel kernel(program, "intersect_segment");
    
    std::cout << "Building indata" << std::endl;
    
    //Open the DEM and load data into memory
    //GDAL Vars
    double        adfGeoTransform[6];
    double rasterXSize = 0.0;
    double rasterYSize = 0.0;
    GDALDataset  *poDataset;
    poDataset = Utils::openDem(demFName);
    
    //Get geotransform info ready
    poDataset->GetGeoTransform( adfGeoTransform );
    rasterXSize = poDataset->GetRasterXSize();
    rasterYSize = poDataset->GetRasterYSize();
    std::cout << "rasterSizeX: " << rasterXSize << std::endl;
    std::cout << "rasterSizeY: " << rasterYSize << std::endl;
    
    //Load into 2d smart PTR
    auto demSP = Utils::GDAL2SP2D(poDataset);
    //Buid the launch positions from this DEM
    auto launchVec = Utils::buildLaunchVec(adfGeoTransform, rasterXSize, rasterYSize, demSP);
    //Get frontal area from calibre
    double fArea = motionUtils::calibreToarea(0.081);
    //Pre-calculate Mortor Sigma
    double mortSigma = worldParams::sigma(fArea);
    
    clock_t tt = clock();
    int skipCnt;
    
    //Loop across the DEM and create the LoS
    for (unsigned int i=0; i<launchVec.size(); i+=skipVal){
        auto launchPos = launchVec.at(i);
        //std::cout << launchPos->x << " // " << launchPos->y << std::endl;
        //Run the Shot
        auto shotTraj = recShot::launchAir(launchPos, tgtPos, 225.0, 65.0, 0.01, mortSigma, 4.2);
        if (shotTraj.back()->x == -99.0) {
            skipCnt+=1;
            continue;
        }
        //Get the DEM Profile Lines
        std::vector<std::shared_ptr<position>> worldProf = Utils::buildProfile(demSP, shotTraj, adfGeoTransform, rasterXSize, rasterYSize);
        //Get the LoS Lines
        std::vector<std::shared_ptr<position>> tLoSProf = Utils::mkLoS(worldProf, 5.0, 5.0);
        //Get line length
        float linLen = Utils::getLinLen(shotTraj);
        //Work task size for CL
        unsigned int taskSize = tLoSProf.size();
        //Make array for results
        int outArr[taskSize];
    
    //    int taskSize = 100000;
    //    float worldArr [taskSize];
    //    float trjArr [taskSize];
    //    //Task size -1 as the kernel does a +1 call for the lines
    //    for (int i=0; i<(taskSize-1); i++){
    //        worldArr[i] = 15.5+i;
    //        trjArr[i] = 5.5+i;
    //    }
        
        //float * outArr = new float[6];
        //std::vector<float> outArr (6);
        //std::cout << outArr.size() << std::endl;
        //int outArr[taskSize];
        //std::vector<float> inArr = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 };
        //std::vector<float> outArr;
        //cl::Buffer inBuff, outBuff;
        
        //std::cout << "Creating Buffers" << std::endl;
        
        //Create the Buffers
        cl::Buffer inBuffWorld(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, sizeof(double)*taskSize, &worldProf, &err);
        cl::Buffer inBuffTrj(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, sizeof(double)*taskSize, &tLoSProf, &err);
        cl::Buffer outBuff(context, CL_MEM_WRITE_ONLY, sizeof(cl_int)*taskSize, NULL, NULL);
        
        //std::cout << "Setting Args" << std::endl;
        
        //Set Kernel Args
        err = kernel.setArg(0, inBuffWorld);
        err = kernel.setArg(1, inBuffTrj);
        err = kernel.setArg(2, sizeof(float), &linLen);
        err = kernel.setArg(3, outBuff);

        if(err < 0) {
            perror("Couldn't create a kernel argument");
            exit(1);
        }
        
        //std::cout << "Execute Kern" << std::endl;

        //clock_t tt = clock();
        // execute kernel
        //just does 1 dim - queue.enqueueTask(kernel);
        queue.enqueueNDRangeKernel(kernel, 0, taskSize);

        // wait for completion
        queue.finish();
        //tt = clock() - tt;
        //std::cout << float(tt)/CLOCKS_PER_SEC << std::endl;
        
        //std::cout << "Grab outputs" << std::endl;

        //Write some outputs
        try {
            queue.enqueueReadBuffer(outBuff, true, 0, sizeof(cl_int)*taskSize, outArr);
        }
        catch (cl::Error &err) {
            //Get the build log for the first device
            std::cerr << "Building failed, " << err.what() << "(" << err.err() << ")"
            << "\nRetrieving build log\n"
            << program.getBuildInfo<CL_PROGRAM_BUILD_LOG>(devices[0])
            << "\n";
            return -1;
        
        }
        //Free memory?
    }
    
    //Timings
    tt = clock() - tt;
    std::cout << float(tt)/CLOCKS_PER_SEC << std::endl;
        
    std::cout << "Results follow: " << std::endl;
    //for (int i=0; i<taskSize; i++){
    //    std::cout << " // " << std::endl;
    //    std::cout << outArr[i] << std::endl;
    //}
    
    std::cout << "Done, skip count: " << skipCnt << std::endl;

    
    return 0;
}



